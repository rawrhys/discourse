name: Deploy to VPS and Shared Hosting

on:
  push:
    branches:
      - main

jobs:
  deploy-vps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /root/discourse-app
            git pull origin main
            npm ci
            rm -rf dist/*
            npm run build
            pm2 restart discourse-app
  deploy-shared-hosting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Clean previous build
        run: rm -rf dist/* public/*

      - name: Build project
        run: |
          npm run build
          date > dist/build-timestamp.txt
          echo "Build completed at $(date)" > dist/build-info.txt
          echo "Build completed at $(date)" > dist/build-info.txt
      
      - name: Backup db.json before deployment
        run: |
          echo "Backing up db.json..."
          curl -s -o db.json.backup "https://${{ secrets.FTP_SERVER }}/db.json" || echo "db.json not found or backup failed"
      
      - name: Deploy to Shared Hosting via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist/
          server-dir: /domains/thediscourse.ai/public_html/
          dangerous-clean-slate: true
      
      - name: Restore db.json after deployment
        run: |
          echo "Restoring db.json..."
          if [ -f db.json.backup ]; then
            curl -T db.json.backup "ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_SERVER }}/domains/thediscourse.ai/public_html/db.json" || echo "Failed to restore db.json"
          else
            echo "No db.json backup found to restore"
          fi

      - name: Deploy src folder to Shared Hosting
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./src/
          server-dir: /domains/thediscourse.ai/public_html/src/

      - name: Verify deployed build (optional)
        run: curl -s https://${{ secrets.FTP_SERVER }}/build-timestamp.txt || echo "Timestamp not found"
        
      - name: Clear browser cache headers
        run: |
          echo "=== Adding cache-busting headers ==="
          # Create a .htaccess addition for cache busting
          cat >> public/.htaccess << 'EOF'
          
          # Force cache refresh for development
          <IfModule mod_headers.c>
            <FilesMatch "\.(html|htm)$">
              Header always set Cache-Control "no-cache, no-store, must-revalidate"
              Header always set Pragma "no-cache"
              Header always set Expires "0"
            </FilesMatch>
          </IfModule>
          EOF
      - name: Clear cache headers (optional)
        run: |
          echo "=== Clearing cache for main assets ==="
          curl -X PURGE https://${{ secrets.FTP_SERVER }}/index.html || echo "PURGE not supported"
          curl -X PURGE https://${{ secrets.FTP_SERVER }}/assets/ || echo "PURGE not supported"
